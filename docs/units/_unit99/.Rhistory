reticulate::repl_python()
mixed_list = [3, 5, 15, 7, "Umbrella", "Apple", 30, "Unicorn", 9]
d3td5t_list = []
find_strings_U = []
for item in mixed_list:
if isinstance(item, int):
if item % 3 == 0 and item % 5 == 0:
print("D3TD5T")
d3td5t_list.append(item)
elif item % 3 == 0:
print("D3T")
elif item % 5 == 0:
print("D5T")
else:
print(item)
elif isinstance(item, str) and item[.startswith]0]=="U":
find_strings_U.append(item)
print("D3TD5T list:", d3td5t_list)
print("Strings starting with U:", find_strings_U)
mixed_list = [3, 5, 15, 7, "Umbrella", "Apple", 30, "Unicorn", 9]
d3td5t_list = []
find_strings_U = []
for item in mixed_list:
if isinstance(item, int):
if item % 3 == 0 and item % 5 == 0:
print("D3TD5T")
d3td5t_list.append(item)
elif item % 3 == 0:
print("D3T")
elif item % 5 == 0:
print("D5T")
else:
print(item)
elif isinstance(item, str) and item[0]=="U":
find_strings_U.append(item)
print("D3TD5T list:", d3td5t_list)
print("Strings starting with U:", find_strings_U)
"""
Task 4: Replace Characters
Replaces 'a' with 'o' in a list of fruits.
"""
fruits = ["banana", "apple", "grape", "mango"]
for fruit in fruits:
fruit.replace("a", "o")
print(fruits)
fruits = ["banana", "apple", "grape", "mango"]
for index, fruit in fruits:
fruit.replace("a", "o")
fruits[index] = fruit
print(fruits)
fruits = ["banana", "apple", "grape", "mango"]
for index, fruit in fruits:
fruit_new = fruit.replace("a", "o")
fruits[index] = fruit_new
print(fruits)
fruits = ["banana", "apple", "grape", "mango"]
for index, fruit in fruits:
fruit_new = fruit.replace("a", "o")
print(fruit_new)
fruits[index] = fruit_new
print(fruits)
fruits = ["banana", "apple", "grape", "mango"]
for index, fruit in fruits:
fruit_new = fruit.replace("a", "o")
print(fruit_new)
fruits[index] = fruit_new
index = 0
fruits = ["banana", "apple", "grape", "mango"]
for fruit in fruits:
fruit_new = fruit.replace("a", "o")
print(fruit_new)
fruits[index] = fruit_new
index +=1
index = 0
fruits = ["banana", "apple", "grape", "mango"]
for fruit in fruits:
fruit_new = fruit.replace("a", "o")
print(fruit_new)
fruits[index] = fruit_new
index +=1
print(fruits)
import pandas as pd
import random
# 1️⃣ The DataFrame is already provided with columns "Index" and "Word"
# Simulated example – in reality you will get this as a CSV
df = pd.DataFrame({
"Index": list(range(1, 101)),
"Word": ["Strike", "Start", "Stone", "Snow", "apple", "orange", "Sun", "Street", "Star", "Smile"] * 10
})
# 2️⃣ Initialize counters
your_score = 0
computer_score = 0
rounds = 5  # Number of draws for each player
# 3️⃣ Your turn
print("🎮 Your Turn:")
for i in range(rounds):
draw_index = random.randint(1, 100)
word = df.loc[df["Index"] == draw_index, "Word"].values[0]
print(f"Round {i+1}: You drew → {word}")
if word == "Strike":
your_score += 100
elif word.startswith("St"):
your_score += 10
elif word.startswith("S"):
your_score += 1
)
your_score
print("\n🤖 Computer's Turn:")
for i in range(rounds):
draw_index = random.randint(1, 100)
word = df.loc[df["Index"] == draw_index, "Word"].values[0]
print(f"Round {i+1}: Computer drew → {word}")
if word == "Strike":
computer_score += 100
elif word.startswith("St"):
computer_score += 10
elif word.startswith("S"):
computer_score += 1
# 5️⃣ Final result
print("\n🏁 Final Results:")
print("Your Score:", your_score)
print("Computer Score:", computer_score)
if your_score > computer_score:
print("🎉 You win!")
elif computer_score > your_score:
print("💻 Computer wins!")
else:
print("🤝 It's a tie!")
"""
Task 7: Lucky String Duel — You vs Computer
You both draw random words from a given DataFrame and score points based on string rules.
"""
import pandas as pd
import random
# 1️⃣ The DataFrame is already provided with columns "Index" and "Word"
# Simulated example – in reality you will get this as a CSV
df = pd.DataFrame({
"Index": list(range(1, 101)),
"Word": ["Strike", "Start", "Stone", "Snow", "apple", "orange", "Sun", "Street", "Star", "Smile"] * 10
})
# 2️⃣ Initialize counters
your_score = 0
computer_score = 0
rounds = 5  # Number of draws for each player
# 3️⃣ Your turn
print("🎮 Your Turn:")
for i in range(rounds):
draw_index = random.randint(1, 100)
word = df.loc[df["Index"] == draw_index, "Word"].values[0]
print(f"Round {i+1}: You drew → {word}")
if word == "Strike":
your_score += 100
elif word.startswith("St"):
your_score += 10
elif word.startswith("S"):
your_score += 1
# 4️⃣ Computer's turn
print("\n🤖 Computer's Turn:")
for i in range(rounds):
draw_index = random.randint(1, 100)
word = df.loc[df["Index"] == draw_index, "Word"].values[0]
print(f"Round {i+1}: Computer drew → {word}")
if word == "Strike":
computer_score += 100
elif word.startswith("St"):
computer_score += 10
elif word.startswith("S"):
computer_score += 1
# 5️⃣ Final result
print("\n🏁 Final Results:")
print("Your Score:", your_score)
print("Computer Score:", computer_score)
if your_score > computer_score:
print("🎉 You win!")
elif computer_score > your_score:
print("💻 Computer wins!")
else:
print("🤝 It's a tie!")
"""
Task 7: Lucky String Duel — You vs Computer
You both draw random words from a given DataFrame and score points based on string rules.
"""
import pandas as pd
import random
# 1️⃣ The DataFrame is already provided with columns "Index" and "Word"
# Simulated example – in reality you will get this as a CSV
df = pd.DataFrame({
"Index": list(range(1, 101)),
"Word": ["Strike", "Start", "Stone", "Snow", "apple", "orange", "Sun", "Street", "Star", "Smile"] * 10
})
# 2️⃣ Initialize counters
your_score = 0
computer_score = 0
rounds = 5  # Number of draws for each player
# 3️⃣ Your turn
print("Your Turn:")
for i in range(rounds):
draw_index = random.randint(1, 100)
word = df.loc[df["Index"] == draw_index, "Word"].values[0]
print(f"Round {i+1}: You drew → {word}")
if word == "Strike":
your_score += 100
elif word.startswith("St"):
your_score += 10
elif word.startswith("S"):
your_score += 1
# 4️⃣ Computer's turn
print("\nComputer's Turn:")
for i in range(rounds):
draw_index = random.randint(1, 100)
word = df.loc[df["Index"] == draw_index, "Word"].values[0]
print(f"Round {i+1}: Computer drew → {word}")
if word == "Strike":
computer_score += 100
elif word.startswith("St"):
computer_score += 10
elif word.startswith("S"):
computer_score += 1
# 5️⃣ Final result
print("\n Final Results:")
print("Your Score:", your_score)
print("Computer Score:", computer_score)
if your_score > computer_score:
print(" You win!")
elif computer_score > your_score:
print("Computer wins!")
else:
print("It's a tie!")
"""
Task 7: Lucky String Duel — You vs Computer
You both draw random words from a given DataFrame and score points based on string rules.
"""
import pandas as pd
import random
# 1️⃣ The DataFrame is already provided with columns "Index" and "Word"
# Simulated example – in reality you will get this as a CSV
df = pd.DataFrame({
"Index": list(range(1, 101)),
"Word": ["Strike", "Start", "Stone", "Snow", "apple", "orange", "Sun", "Street", "Star", "Smile"] * 10
})
# 2️⃣ Initialize counters
your_score = 0
computer_score = 0
rounds = 5  # Number of draws for each player
# 3️⃣ Your turn
print("Your Turn:")
for i in range(rounds):
draw_index = random.randint(1, 100)
word = df.loc[df["Index"] == draw_index, "Word"].values[0]
print(f"Round {i+1}: You drew → {word}")
if word == "Strike":
your_score += 100
elif word.startswith("St"):
your_score += 10
elif word.startswith("S"):
your_score += 1
# 4️⃣ Computer's turn
print("\nComputer's Turn:")
for i in range(rounds):
draw_index = random.randint(1, 100)
word = df.loc[df["Index"] == draw_index, "Word"].values[0]
print(f"Round {i+1}: Computer drew → {word}")
if word == "Strike":
computer_score += 100
elif word.startswith("St"):
computer_score += 10
elif word.startswith("S"):
computer_score += 1
# 5️⃣ Final result
print("\n Final Results:")
print("Your Score:", your_score)
print("Computer Score:", computer_score)
if your_score > computer_score:
print(" You win!")
elif computer_score > your_score:
print("Computer wins!")
else:
print("It's a tie!")
# unit09__ex(1-2)code.py
class Animal:
def __init__(self, name, age, region, sleep_cycle):
self.name = name
self.age = age
self.region_info = region
self.sleep_cycle_info = sleep_cycle
def region(self):
print(f"{self.name} lives mostly in {self.region_info}.")
def sleep(self):
print(f"{self.name} sleeps {self.sleep_cycle_info}.")
class Bird(Animal):
def __init__(self, name, age, region, sleep_cycle, flying_height):
super().__init__(name, age, region, sleep_cycle)
self.flying_height = flying_height
def fly(self):
print(f"{self.name} can fly up to {self.flying_height} meters high.")
class Reptile(Animal):
def __init__(self, name, age, region, sleep_cycle, reptile_length):
super().__init__(name, age, region, sleep_cycle)
self.reptile_length = reptile_length
def crawl(self):
print(f"{self.name} moves by slithering smoothly across the ground.")
def length(self):
print(f"{self.name} is about {self.reptile_length} meters long.")
# Example usage
if __name__ == "__main__":
eagle = Bird("Eagle", 5, "mountain regions", "at night", 3000)
eagle.region()
eagle.sleep()
eagle.fly()
python_snake = Reptile("Python", 8, "rainforests", "during the day", 6)
python_snake.region()
python_snake.sleep()
python_snake.crawl()
python_snake.length()
